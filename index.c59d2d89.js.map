{"mappings":"AAgBOA,eAAeC,IAClB,MAAMC,QAAiBC,MAAM,kCAG7B,aAFgCD,EAASE,M,CCG7C,MAAMC,EAAiBC,SAASC,cAAc,qBACxCC,EAAcF,SAASC,cAAc,iBACrCE,EAAOH,SAASC,cAAc,QAEpCF,EAAeK,iBAAiB,SAGhC,WACIT,IAAgBU,MAAKC,IACjB,MAAMC,EAAkCD,EAMvBE,KAAKC,GACf,kC,EAEKC,2B,EACFC,0B,EACEC,wBACTH,EAAQI,8BACFJ,EAAQK,kC,EACLC,2HAbZb,EAAYc,mBAAmB,YAAaT,EAAc,G,IALlEJ,EAAKC,iBAAiB,UA0BZ,SAAkBa,GACdA,EAAEC,iBAEF,MAAMC,EAASF,EAAEG,cAAcC,SAGrBF,EAAOT,KAAKY,MACbH,EAAOR,IAAIW,MACRH,EAAOP,OAAOU,MACbH,EAAON,OAAOS,MAChBH,EAAOL,MAAMQ,MACRH,EAAOJ,WAAWQ,QAGlCN,EAAEG,cAAcI,O","sources":["src/api-server.js","src/index.js"],"sourcesContent":["// 1. Реалізуйте функцію для отримання списку всіх студентів (HTTP GET /students)\n// 2. Реалізуйте функцію для додавання нового студента (HTTP POST /students)\n// 3. Реалізуйте функцію для оновлення інформації про студента (HTTP PUT /students/{id})\n// 4. Реалізуйте функцію для часткового оновлення студента (HTTP PATCH /students/{id})\n// 5. Реалізуйте функцію для видалення студента за його ідентифікатором (HTTP DELETE /students/{id})\n// 6. Створити HTML-сторінку з необхідними елементами, такими як кнопки, текстові поля та таблицю для відображення студентів.\n\n// 7. Написати JavaScript-код для обробки подій користувача.\n// 7.1. Додати обробники подій для кнопок, щоб вони виконували відповідні HTTP-запити.\n// 7.2. При натисканні на кнопку \"Отримати студентів\" (GET), виконати HTTP-запит GET /students і відобразити отримані дані в таблиці.\n// 7.3. Реалізувати форму для додавання нового студента. При натисканні на кнопку \"Додати студента\" (POST), зібрати дані з полів вводу, сформувати об'єкт з даними  і виконати HTTP-запит POST /students, щоб додати нового студента до бази даних.\n// 7.4. Реалізувати можливість оновлення інформації про студента. Для кожного студента в таблиці додати кнопку \"Оновити\". При натисканні на цю кнопку, виконати HTTP-запит PUT /students/:id, де :id — ідентифікатор фільму, і відправити оновлені дані про студента на сервер.\n// 7.5. Додати можливість видалення студента. Для кожного студента в таблиці додати кнопку \"Видалити\". При натисканні на цю кнопку, виконати HTTP-запит DELETE /students/:id.\n\nconst BASE_URL = 'localhost:3000'\n\nexport async function fetchStudents(){\n    const response = await fetch(`http://${BASE_URL}/students`)\n    const fetchStudentsJson = await response.json()\n\n    return fetchStudentsJson\n}\n\n\nexport async function addStudent(newStudent){\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(newStudent),\n        headers: {\n\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n            \n            },  \n    }\n\n    const response = await fetch(`http://${BASE_URL}/students`, options)\n    const addStudentJson = await response.json()\n\n    return addStudentJson\n\n}\n\nexport async function deleteStudent(id){\n    const options={\n        method: \"DELETE\",\n        headers: {\n\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n            \n            }, \n    }\n\n    const response = await fetch(`http://${BASE_URL}/students/${id}`, options)\n    const deleteStudentJson = await response.json()\n\n    return deleteStudentJson\n}\n\nexport async function updateStudent(id, valueToUpdate){\n    const options = {\n        method: \"PATCH\",\n        body: JSON.stringify(valueToUpdate),\n        headers: {\n\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n            \n            },\n    }\n\n    const response = await fetch(`http://${BASE_URL}/students/${id}`, options)\n    const updateStudentJson = await response.json()\n\n    return updateStudentJson\n}","// 1. Реалізуйте функцію для отримання списку всіх студентів (HTTP GET /students)\n// 2. Реалізуйте функцію для додавання нового студента (HTTP POST /students)\n// 3. Реалізуйте функцію для оновлення інформації про студента (HTTP PUT /students/{id})\n// 4. Реалізуйте функцію для часткового оновлення студента (HTTP PATCH /students/{id})\n// 5. Реалізуйте функцію для видалення студента за його ідентифікатором (HTTP DELETE /students/{id})\n// 6. Створити HTML-сторінку з необхідними елементами, такими як кнопки, текстові поля та таблицю для відображення студентів.\n\n// 7. Написати JavaScript-код для обробки подій користувача.\n// 7.1. Додати обробники подій для кнопок, щоб вони виконували відповідні HTTP-запити.\n// 7.2. При натисканні на кнопку \"Отримати студентів\" (GET), виконати HTTP-запит GET /students і відобразити отримані дані в таблиці.\n// 7.3. Реалізувати форму для додавання нового студента. При натисканні на кнопку \"Додати студента\" (POST), зібрати дані з полів вводу, сформувати об'єкт з даними  і виконати HTTP-запит POST /students, щоб додати нового студента до бази даних.\n// 7.4. Реалізувати можливість оновлення інформації про студента. Для кожного студента в таблиці додати кнопку \"Оновити\". При натисканні на цю кнопку, виконати HTTP-запит PUT /students/:id, де :id — ідентифікатор фільму, і відправити оновлені дані про студента на сервер.\n// 7.5. Додати можливість видалення студента. Для кожного студента в таблиці додати кнопку \"Видалити\". При натисканні на цю кнопку, виконати HTTP-запит DELETE /students/:id.\n\n\nimport {fetchStudents} from './api-server'\nimport {addStudent} from './api-server'\nimport {deleteStudent} from './api-server'\nimport {updateStudent} from './api-server'\n\n\nconst getStudentsBtn = document.querySelector('.get-students-btn')\nconst studentList = document.querySelector('.student-list')\nconst form = document.querySelector('form')\n\ngetStudentsBtn.addEventListener('click',  onGetStudentsBtn)\nform.addEventListener('submit', onSubmit)\n\nfunction onGetStudentsBtn(){\n    fetchStudents().then(studentsArr =>{\n        const studentMarkUp = studentListMarkUp(studentsArr)\n        studentList.insertAdjacentHTML('beforeend', studentMarkUp)\n    } );\n}\n\nfunction studentListMarkUp(arrOfStudents){\n    return arrOfStudents.map((student)=>{\n        return `\n        <li>\n      <h1>Ім'я:${student.name}</h1>\n      <p>Вік:${student.age}</p>\n      <p>Курс:${student.course}</p>\n      <p>${student.skills}</p>\n      <p>email:${student.email}</p>\n      <p>Зараховано:${student.isEnrolled}</p>\n      <button>Видалити студента</button>\n      <button>Оновити студента</button>\n    </li>\n        `\n    }) \n}\n\nfunction onSubmit(e){\n    e.preventDefault()\n\n    const formEl = e.currentTarget.elements\n\n    const newStudent = {\n        name: formEl.name.value,\n        age: formEl.age.value,\n        course: formEl.course.value,\n        skills: [formEl.skills.value],\n        email: formEl.email.value,\n        isEnrolled: formEl.isEnrolled.checked \n    }\n\n    e.currentTarget.reset()\n}"],"names":["async","$ff6dae0f4d803866$export$a47fd80589940fbb","response","fetch","json","$1f0dc3b9307be026$var$getStudentsBtn","document","querySelector","$1f0dc3b9307be026$var$studentList","$1f0dc3b9307be026$var$form","addEventListener","then","studentsArr","studentMarkUp","map","student","name","age","course","skills","email","isEnrolled","insertAdjacentHTML","e","preventDefault","formEl","currentTarget","elements","value","checked","reset"],"version":3,"file":"index.c59d2d89.js.map"}