{"mappings":"AAgBOA,eAAeC,IAClB,MAAMC,QAAiBC,MAAM,kCAG7B,aAFgCD,EAASE,M,CAMtCJ,eAAeK,EAAWC,GAC7B,MAAMC,EAAU,CACZC,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CAEL,eAAgB,oCAKlBV,QAAiBC,MAAM,iCAA+BI,GAG5D,aAF6BL,EAASE,M,CAMnCJ,eAAea,EAAcC,GAChC,MASMZ,QAAiBC,MAAM,kCAA+BW,IAT9C,CACVN,OAAQ,SACRI,QAAS,CAEL,eAAgB,qCAQxB,aAFgCV,EAASE,M,CAKtCJ,eAAee,EAAcD,EAAIE,GACpC,MAAMT,EAAU,CACZC,OAAQ,QACRC,KAAMC,KAAKC,UAAUK,GACrBJ,QAAS,CAEL,eAAgB,oCAKlBV,QAAiBC,MAAM,kCAA+BW,IAAMP,GAGlE,aAFgCL,EAASE,M,CCjD7C,MAAMa,EAAiBC,SAASC,cAAc,qBACxCC,EAAcF,SAASC,cAAc,iBACrCE,EAAOH,SAASC,cAAc,aAE9BG,GADYJ,SAASC,cAAc,kBACvBD,SAASC,cAAc,mBACnCI,EAAaL,SAASC,cAAc,gBACpCK,EAAcN,SAASC,cAAc,aACrCM,EAAWP,SAASC,cAAc,UAClCO,EAAgBR,SAASC,cAAc,oBA4B7C,SAASQ,IACL1B,IAAgB2B,MAAKC,IACjB,MAAMC,EAAkCD,EAMvBE,KAAKC,GACf,qBACGA,EAAQlB,wB,EACNmB,2B,EACFC,0B,EACEC,wBACTH,EAAQI,8BACFJ,EAAQK,kC,EACLC,mMAbZlB,EAAYmB,UAAYT,CAAa,G,CAyCnC,SAASU,EAAY1B,GACjBW,EAASgB,UAAUC,IAAI,WACvBlB,EAAYiB,UAAUC,IAAI,cAE1BC,QAAQC,IAAI1B,SAAS2B,eAAe/B,G,CA1E9CG,GACAA,EAAe6B,iBAAiB,QAASnB,GAGzCN,GACAA,EAAKyB,iBAAiB,UA6ChB,SAAkBC,GACdA,EAAEC,iBAEF,MAAMC,EAASF,EAAEG,cAAcC,SAW/B9C,EATmB,CACf4B,KAAMgB,EAAOhB,KAAKmB,MAClBlB,IAAKe,EAAOf,IAAIkB,MAChBjB,OAAQc,EAAOd,OAAOiB,MACtBhB,OAAQ,CAACa,EAAOb,OAAOgB,OACvBf,MAAOY,EAAOZ,MAAMe,MACpBd,WAAYW,EAAOX,WAAWe,UAIjCzB,MAAK1B,GAAayC,QAAQC,IAAI,YAE/BG,EAAEG,cAAcI,O,IA3D1BlC,GACAA,EAAY0B,iBAAiB,SA2EvB,SAAoBC,GAChBQ,UAAYR,EAAES,OAAOC,WAAW3C,GAG7BiC,EAAES,OAAOf,UAAUiB,SAAS,iBAC3B7C,EAAc0C,WAAW3B,MAAK,IAAMD,MAGhCoB,EAAES,OAAOf,UAAUiB,SAAS,kBAChClB,EAAYe,U,IAjF1BjC,GACAA,EAAUwB,iBAAiB,QAASN,GAGpCd,GACAA,EAAcoB,iBAAiB,SA6DzB,WACIrB,EAASgB,UAAUkB,OAAO,WAC1BnC,EAAYiB,UAAUkB,OAAO,a,IA5DvCpC,GACAA,EAAWuB,iBAAiB,UA6EtB,SAAwBC,GACpBA,EAAEC,iBAEF,IAAIhC,EAAgB,GAEpB,IAAK,MAAM4C,KAAWb,EAAES,OAAOL,SACL,KAAlBS,EAAQR,QACRpC,EAAc4C,EAAQ3B,MAAQ2B,EAAQR,OAM9CrC,EAAcwC,UAAWvC,GACxBY,MAAK,KACFD,IACAF,EAASgB,UAAUkB,OAAO,WAC1BnC,EAAYiB,UAAUkB,OAAO,cAC7BpC,EAAW+B,OAAO,G","sources":["src/api-server.js","src/index.js"],"sourcesContent":["// 1. Реалізуйте функцію для отримання списку всіх студентів (HTTP GET /students)\n// 2. Реалізуйте функцію для додавання нового студента (HTTP POST /students)\n// 3. Реалізуйте функцію для оновлення інформації про студента (HTTP PUT /students/{id})\n// 4. Реалізуйте функцію для часткового оновлення студента (HTTP PATCH /students/{id})\n// 5. Реалізуйте функцію для видалення студента за його ідентифікатором (HTTP DELETE /students/{id})\n// 6. Створити HTML-сторінку з необхідними елементами, такими як кнопки, текстові поля та таблицю для відображення студентів.\n\n// 7. Написати JavaScript-код для обробки подій користувача.\n// 7.1. Додати обробники подій для кнопок, щоб вони виконували відповідні HTTP-запити.\n// 7.2. При натисканні на кнопку \"Отримати студентів\" (GET), виконати HTTP-запит GET /students і відобразити отримані дані в таблиці.\n// 7.3. Реалізувати форму для додавання нового студента. При натисканні на кнопку \"Додати студента\" (POST), зібрати дані з полів вводу, сформувати об'єкт з даними  і виконати HTTP-запит POST /students, щоб додати нового студента до бази даних.\n// 7.4. Реалізувати можливість оновлення інформації про студента. Для кожного студента в таблиці додати кнопку \"Оновити\". При натисканні на цю кнопку, виконати HTTP-запит PUT /students/:id, де :id — ідентифікатор фільму, і відправити оновлені дані про студента на сервер.\n// 7.5. Додати можливість видалення студента. Для кожного студента в таблиці додати кнопку \"Видалити\". При натисканні на цю кнопку, виконати HTTP-запит DELETE /students/:id.\n\nconst BASE_URL = 'localhost:3000'\n\nexport async function fetchStudents(){\n    const response = await fetch(`http://${BASE_URL}/students`)\n    const fetchStudentsJson = await response.json()\n\n    return fetchStudentsJson\n}\n\n\nexport async function addStudent(newStudent){\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(newStudent),\n        headers: {\n\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n            \n            },  \n    }\n\n    const response = await fetch(`http://${BASE_URL}/students`, options)\n    const addStudentJson = await response.json()\n\n    return addStudentJson\n\n}\n\nexport async function deleteStudent(id){\n    const options={\n        method: \"DELETE\",\n        headers: {\n\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n            \n            }, \n    }\n\n    const response = await fetch(`http://${BASE_URL}/students/${id}`, options)\n    const deleteStudentJson = await response.json()\n\n    return deleteStudentJson\n}\n\nexport async function updateStudent(id, valueToUpdate){\n    const options = {\n        method: \"PATCH\",\n        body: JSON.stringify(valueToUpdate),\n        headers: {\n\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n            \n            },\n    }\n\n    const response = await fetch(`http://${BASE_URL}/students/${id}`, options)\n    const updateStudentJson = await response.json()\n\n    return updateStudentJson\n}","// 1. Реалізуйте функцію для отримання списку всіх студентів (HTTP GET /students)\n// 2. Реалізуйте функцію для додавання нового студента (HTTP POST /students)\n// 3. Реалізуйте функцію для оновлення інформації про студента (HTTP PUT /students/{id})\n// 4. Реалізуйте функцію для часткового оновлення студента (HTTP PATCH /students/{id})\n// 5. Реалізуйте функцію для видалення студента за його ідентифікатором (HTTP DELETE /students/{id})\n// 6. Створити HTML-сторінку з необхідними елементами, такими як кнопки, текстові поля та таблицю для відображення студентів.\n\n// 7. Написати JavaScript-код для обробки подій користувача.\n// 7.1. Додати обробники подій для кнопок, щоб вони виконували відповідні HTTP-запити.\n// 7.2. При натисканні на кнопку \"Отримати студентів\" (GET), виконати HTTP-запит GET /students і відобразити отримані дані в таблиці.\n// 7.3. Реалізувати форму для додавання нового студента. При натисканні на кнопку \"Додати студента\" (POST), зібрати дані з полів вводу, сформувати об'єкт з даними  і виконати HTTP-запит POST /students, щоб додати нового студента до бази даних.\n// 7.4. Реалізувати можливість оновлення інформації про студента. Для кожного студента в таблиці додати кнопку \"Оновити\". При натисканні на цю кнопку, виконати HTTP-запит PUT /students/:id, де :id — ідентифікатор фільму, і відправити оновлені дані про студента на сервер.\n// 7.5. Додати можливість видалення студента. Для кожного студента в таблиці додати кнопку \"Видалити\". При натисканні на цю кнопку, виконати HTTP-запит DELETE /students/:id.\n\n\nimport {fetchStudents} from './api-server'\nimport {addStudent} from './api-server'\nimport {deleteStudent} from './api-server'\nimport {updateStudent} from './api-server'\n\n\nconst getStudentsBtn = document.querySelector('.get-students-btn')\nconst studentList = document.querySelector('.student-list')\nconst form = document.querySelector('.add-form')\nconst deleteBtn = document.querySelector(\".delete-button\")\nconst updateBtn = document.querySelector(\".update-button\")\nconst updateForm = document.querySelector(\".update-form\")\nconst backdropRef = document.querySelector(\".backdrop\")\nconst modalRef = document.querySelector(\".modal\")\nconst closeModalBtn = document.querySelector(\".close-modal-btn\")\n\nif (getStudentsBtn) {\n    getStudentsBtn.addEventListener('click', onGetStudentsBtn);\n}\n\nif (form) {\n    form.addEventListener('submit', onSubmit);\n}\n\nif (studentList) {\n    studentList.addEventListener('click', onBtnClick);\n}\n\nif (updateBtn) {\n    updateBtn.addEventListener('click', onUpdateBtn);\n}\n\nif (closeModalBtn) {\n    closeModalBtn.addEventListener('click', onCloseBtn);\n}\n\nif (updateForm) {\n    updateForm.addEventListener('submit', onUpdateSubmit);\n}\n\n\n\nfunction onGetStudentsBtn(){\n    fetchStudents().then(studentsArr =>{\n        const studentMarkUp = studentListMarkUp(studentsArr)\n        studentList.innerHTML = studentMarkUp\n    } );\n}\n\nfunction studentListMarkUp(arrOfStudents){\n    return arrOfStudents.map((student)=>{\n        return `\n        <li id=\"${student.id}\">\n      <h1>Ім'я:${student.name}</h1>\n      <p>Вік:${student.age}</p>\n      <p>Курс:${student.course}</p>\n      <p>${student.skills}</p>\n      <p>email:${student.email}</p>\n      <p>Зараховано:${student.isEnrolled}</p>\n      <button class=\"delete-button\" type=\"button\">Видалити студента</button>\n      <button class=\"update-button\" type=\"button\">Оновити студента</button>\n    </li>\n        `\n    }) \n}\n\nfunction onSubmit(e){\n    e.preventDefault()\n\n    const formEl = e.currentTarget.elements\n\n    const newStudent = {\n        name: formEl.name.value,\n        age: formEl.age.value,\n        course: formEl.course.value,\n        skills: [formEl.skills.value],\n        email: formEl.email.value,\n        isEnrolled: formEl.isEnrolled.checked \n    }\n\n    addStudent(newStudent)\n    .then(response  => console.log('afaffa'))\n\n    e.currentTarget.reset()\n}\n\nfunction onUpdateBtn(id){\n    modalRef.classList.add('is-show')\n    backdropRef.classList.add('modal-show')\n\n    console.log(document.getElementById(id));\n\n}\n\nfunction onCloseBtn(){\n    modalRef.classList.remove('is-show')\n    backdropRef.classList.remove('modal-show')\n}\n\n\nfunction onBtnClick(e){\n    studentId = e.target.parentNode.id;\n\n\n    if(e.target.classList.contains('delete-button')){\n        deleteStudent(studentId).then(() => onGetStudentsBtn())\n        \n    }\n    else if(e.target.classList.contains('update-button')){\n        onUpdateBtn(studentId)\n        \n    }\n}\n\nfunction onUpdateSubmit(e) {\n    e.preventDefault()\n    \n    let valueToUpdate = {}\n\n    for (const element of e.target.elements) {\n        if (element.value !== '') {\n            valueToUpdate[element.name] = element.value\n        }\n    \n    }\n    \n\n    updateStudent(studentId, valueToUpdate)\n    .then(()=>{\n        onGetStudentsBtn();\n        modalRef.classList.remove('is-show');\n        backdropRef.classList.remove('modal-show');\n        updateForm.reset();\n    })\n    \n}\n\n\n"],"names":["async","$ff6dae0f4d803866$export$a47fd80589940fbb","response","fetch","json","$ff6dae0f4d803866$export$43c0ded1cf9d0940","newStudent","options","method","body","JSON","stringify","headers","$ff6dae0f4d803866$export$3a8629131ae87772","id","$ff6dae0f4d803866$export$bb44b68707822cc6","valueToUpdate","$1f0dc3b9307be026$var$getStudentsBtn","document","querySelector","$1f0dc3b9307be026$var$studentList","$1f0dc3b9307be026$var$form","$1f0dc3b9307be026$var$updateBtn","$1f0dc3b9307be026$var$updateForm","$1f0dc3b9307be026$var$backdropRef","$1f0dc3b9307be026$var$modalRef","$1f0dc3b9307be026$var$closeModalBtn","$1f0dc3b9307be026$var$onGetStudentsBtn","then","studentsArr","studentMarkUp","map","student","name","age","course","skills","email","isEnrolled","innerHTML","$1f0dc3b9307be026$var$onUpdateBtn","classList","add","console","log","getElementById","addEventListener","e","preventDefault","formEl","currentTarget","elements","value","checked","reset","studentId","target","parentNode","contains","remove","element"],"version":3,"file":"index.daaef067.js.map"}